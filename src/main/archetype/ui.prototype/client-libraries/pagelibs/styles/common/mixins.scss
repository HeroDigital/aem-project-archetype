// White sopace reset
@mixin no_white_space(){
	letter-spacing: -0.31em;
    *letter-spacing: normal;
    *word-spacing: -0.43em;
    text-rendering: optimizespeed;

    > *{
	    letter-spacing: normal;
	    *letter-spacing: normal;
	    *word-spacing: normal;
    }
}

// Text overflow
// Requires inline-block or block for proper styling
@mixin text-overflow() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// WebKit-style focus
@mixin tab-focus() {
  // Default
  outline: thin dotted;
  // WebKit
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px;
}

// Link Style
@mixin set-link-style($color, $bg, $hover, $hover_bg) {
    color: $color;
    @if $bg == transparent {
        transition: color 0.15s ease;
    } @else {
        background-color: $bg;
        transition: all 0.15s ease;
    }
    text-decoration: none;

    &:hover,
    &:focus,
    &:active {
        color: $hover;
        @if $hover_bg != transparent {
            background-color: $hover_bg;
        }
        text-decoration: none;
    }
}
@mixin set-link-style-hover($hover, $hover_bg) {
    &:hover,
    &:focus,
    &:active {
        color: $hover;
        @if $hover_bg != transparent {
            background-color: $hover_bg;
        }
        text-decoration: none;
    }
}

// Mixin for resizing child components/elements
@mixin resize-full-width-height(){
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
}

// Mixin for resetting child components/elements
@mixin reset-full-width-height(){
    position: relative;
    top: auto;
    right: auto;
    bottom: auto;
    left: auto;
}

// Fixed Sticky
// Only include once
$included-once: false;

@if ($included-once == false) {
    $included-once: true;

    // @import "./fixedsticky.scss";

    @mixin keyframes($name) {
      @-webkit-keyframes #{$name} {
        @content;
      }

      @-moz-keyframes #{$name} {
        @content;
      }

      @-ms-keyframes #{$name} {
        @content;
      }

      @keyframes #{$name} {
        @content;
      }
    }

    @include keyframes(sass-fixed-sticky-animation) {
        from {
         counter-reset: "";
        }

        to {
         counter-reset: "";
        }
    }

    @mixin position($args...) {
        @if (nth($args, 1) == 'sticky') {
            // Animate this element so you will be able to tell in Javascript which
            // elements fixedsticky should be applied to. Loops for a couple seconds, so
            // that way it will work even if the script is not loaded for a while.
            & {
                $animation-duration: 60ms;
                $animation-name: sass-fixed-sticky-animation;
                animation-duration: $animation-duration;;
                animation-name: $animation-name;
                -webkit-animation-duration: $animation-duration;;
                -webkit-animation-name: $animation-name;
                animation-iteration-count: 100;

                &.sass-fixed-sticky-animation-stopped {
                    -webkit-animation-play-state: paused;
                    -moz-animation-play-state: paused;
                    -o-animation-play-state: paused;
                    animation-play-state: paused;
                }
            }
        } @else {
            // Add the position like normal
            position: $args;
        }
    }
}